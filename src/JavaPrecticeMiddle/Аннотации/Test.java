package JavaPrecticeMiddle.Аннотации;

public class Test {
    public static void main(String[] args){
        /*
        Java-аннотации - это специальный тип комментариев в нашем коде, который позволяет:
        1.Передавать какие-то инструкции для java компилятора
        2.Передавать какие-то инструкции для анализаторов исходного кода (напр., инструменты которые гененрируют документацию из исходного кода)
        3.Передавать метаданные, которые могут быть использованы либо вашим java-приложением (с помощью рефлексии), либо другими приложениями или фреймворками (напр., Spring Framework)
        Метаданные - данные, которые описывают другие данные, например, теги в HTML или java аннотации

        Заключение: java аннотации - это спец. тип комментариев (не java код), которые прочитываются java компилятором и эти комментарии могут передавать какие-то  компилятору или другим программам, которые читают наш код
        Комментарии дают доп. информацию о нашем коде

        Можно создавать свои аннотации. Пример: public @interface myAnnotation{
                                                }
        Для чего может понадобиться создавать свои аннотации?
        Например, если вы реализуете свою библиотеку или фреймворк, то для того, чтобы другой пользователь мог корректно с ними взаимодействовать, вы создаете свои аннотации. В этом сценарии активно используется рефлексия.
        У аннотации могут быть свои поля: (поля объявляем как сигнатуры методов)

        Пример:
        public @interface Author{
            String name();
            int dateOfBirth();
        }

        @Author(name = "ABC", dateOfBirth = 1947)
        public class Test{
        }

        Также можно выставлять значения по умолчанию:

        Пример:
        public @interface Author{
            String name() default "ABC";
            int dateOfBirth() default 1947;
        }

        @Author()
        public class Test{
        }

        Также есть аннотирующие аннотации, т.е. аннотации, которые можнол применить к другим аннотациям.
        Например, аннотация @Target. Она указывает к чему может быть применена аннотация (поле, метод, класс и т.д.)

        Пример:
        @Target(ElementType.METHOD)
        public @interface Author{
            String name() default "ABC";
            int dateOfBirth() default 1947;
        }

        @Author()                 //здесь аннотация будет подсвечиваться красным, т.к. здесь она применена к классу, а в таргете мы указали, что она может быть применена только к методу
        public class Test{
        }

        Можем в @Target указать несколько типов, к которым может быть применена аннотация. Делается это так:
        @Target({ElementType.METHOD, ElementType.TYPE})                //TYPE- либо класс, либо интерфейс, либо перечисление
         */
    }
}
